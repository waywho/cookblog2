# Scaffolding generated by Casein v5.1.1.5

module Casein
  class RecipesController < Casein::CaseinController
    before_filter :load_recipe, :only => [:show, :update, :destroy]
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Recipes'
      @recipes = Recipe.order(sort_order(:title)).paginate :page => params[:page]
      respond_to do |format|
        format.html
        format.csv { send_data @recipes.to_csv, filename: "recipes-#{Date.today}.csv"}
        format.xlsx
      end
    end
  
    def show
      @casein_page_title = 'View recipe'
      @ingredient_forms = @recipe.ingredient_forms
      @ingredient = @recipe.ingredients
      if @recipe.photo.present? 
        @photo = @recipe.photo
      else
        @photo = @recipe.build_photo
      end
    end
  
    def import
      Recipe.import(params[:file])
      flash[:notice] = 'File has been imported'
      redirect_to casein_recipes_path
    end

    def new
      @casein_page_title = 'Add a new recipe'
      @recipe = Recipe.new
      @recipe.build_photo
      3.times { @recipe.ingredient_forms.build.build_ingredient }
    end

    def create
      @recipe = Recipe.new recipe_params
    
      if @recipe.save
        if params[:publish]
            @recipe.publish!
        end
        # if params[:photo_attributes]
        #   params[:photo_attributes]['image'].each do |image|
        #     @recipe.photo.create(image: image)
        #   end
        # end

        flash[:notice] = 'Recipe created'
        redirect_to casein_recipes_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new recipe'
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = 'Update recipe'
      
      respond_to do |format|

        if @recipe.update_attributes recipe_params
          if params[:publish]
            @recipe.publish!
          elsif params[:unpublish]
            @recipe.unpublish!
          end
        
          format.html { redirect_to casein_recipe_path(@recipe), notice: "Recipe has been updated. #{undo_link}" }
          format.js
        else
          flash.now[:warning] = 'There were problems when trying to update this recipe'
          render :action => :show
        end
     end
    end
    
    def edit_multiple
      @recipes = Recipe.where(id: recipe_params[:recipe_ids])

      if params[:edit]
        render "recipes/edit_multiple"
      elsif params[:unpublish]
        @recipes.each do |recipe|
          recipe.unpublish! if recipe.published?
        end
        redirect_to casein_recipes_path
      elsif params[:publish]
        @recipes.each do |recipe|
          recipe.publish! if !recipe.published?
        end
          redirect_to casein_recipes_path
      elsif params[:delete]
          @recipes.destroy_all
          redirect_to casein_recipes_path
      end
    end

    def update_multiple
     @recipes = Recipe.friendly.update(params[:recipes].keys, params[:recipes].values)
      @recipes.reject! { |recipe| recipe.errors.empty? }
      if @recipes.empty?
        redirect_to casein_recipes_path
      else
        render "recipes/edit_multiple"
      end
    end
 
    def destroy

      @recipe.destroy
      flash[:notice] = "Recipe has been deleted. #{undo_link}"
      redirect_to casein_recipes_path
    end
  
    private
      
      def recipe_params
        params.require(:recipe).permit(:title, :content, :keywords, :workflow_state, :keyword_list, :category,
          {photo_attributes: [:id, :caption, :image, :recipe_id]}, {:recipe_ids => []}, :photo,
          {ingredient_forms_attributes: [:_destroy, :amount, :unit, :processed_form, :id, ingredient_attributes: [:name, :id]] })
      end
      
      def undo_link
        view_context.link_to("undo", revert_version_path(@recipe.versions.last), :method => :post).html_safe
      end
      
      def load_recipe
        @recipe = Recipe.friendly.find params[:id]
      end
  
  end
end
