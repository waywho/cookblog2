# Scaffolding generated by Casein v5.1.1.5

module Casein
  class AdsController < Casein::CaseinController
    before_filter :load_ad, :only => [:show, :update, :destroy]
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Ads'
      @ads = Ad.order(sort_order(:content)).paginate :page => params[:page]
      respond_to do |format|
        format.html
        format.csv { send_data @ads.to_csv, filename: "ads-#{Date.today}.csv"}
        format.xlsx
      end
    end
  
    def show
      @casein_page_title = 'View ad'
    end
  
    def import
      Ad.import(params[:file])
      flash[:notice] = 'File has been imported'
      redirect_to casein_ads_path
    end

    def new
      @casein_page_title = 'Add a new ad'
      @ad = Ad.new
    end

    def create
      @ad = Ad.new ad_params
    
      if @ad.save
        flash[:notice] = 'Ad created'
        redirect_to casein_ads_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new ad'
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = 'Update ad'
      
      respond_to do |format|
          if params[:submit]
        if @ad.update_attributes ad_params
          
            @ad.submit!
          elsif params[:approve]
            @ad.approve!
          elsif params[:reject]
            @ad.reject!
          elsif params[:publish]
            @ad.publish!
          elsif params[:unpublish]
            @ad.unpublish!
          end
        
          format.html { redirect_to casein_ad_path(@ad), notice: "Ad has been updated. #{undo_link}" }
          format.js
        else
          flash.now[:warning] = 'There were problems when trying to update this ad'
          render :action => :show
        end
     end
    end
    
    def edit_multiple
      @ads = Ad.where(id: ad_params[:ad_ids])

      if params[:edit]
        render "ads/edit_multiple"
      elsif params[:unpublish]
        @ads.each do |ad|
          ad.unpublish! if ad.published?
        end
        redirect_to casein_ads_path
      elsif params[:publish]
        @ads.each do |ad|
          ad.publish! if !ad.published?
        end
          redirect_to casein_ads_path
      elsif params[:delete]
          @ads.destroy_all
          redirect_to casein_ads_path
      end
    end

    def update_multiple
     @ads = Ad.friendly.update(params[:ads].keys, params[:ads].values)
      @ads.reject! { |ad| ad.errors.empty? }
      if @ads.empty?
        redirect_to casein_ads_path
      else
        render "ads/edit_multiple"
      end
    end
 
    def destroy

      @ad.destroy
      flash[:notice] = 'Ad has been deleted. #{undo_link}"'
      redirect_to casein_ads_path
    end
  
    private
      
      def ad_params
        params.require(:ad).permit(:content, :position)
      end
      
      def undo_link
        view_context.link_to("undo", revert_version_path(@ad.versions.last), :method => :post).html_safe
      end
      
      def load_ad
        @ad = Ad.find params[:id]
      end
  
  end
end
