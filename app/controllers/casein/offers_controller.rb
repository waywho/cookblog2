# Scaffolding generated by Casein v5.1.1.5

module Casein
  class OffersController < Casein::CaseinController
    before_filter :load_offer, :only => [:show, :update, :destroy]
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Offers'
      @offers = Offer.order(sort_order(:title)).paginate :page => params[:page]
      respond_to do |format|
        format.html
        format.csv { send_data @offers.to_csv, filename: "offers-#{Date.today}.csv"}
        format.xlsx
      end
    end
  
    def show
      @casein_page_title = 'View offer'
    end
  
    def import
      Offer.import(params[:file])
      flash[:notice] = 'File has been imported'
      redirect_to casein_offers_path
    end

    def new
      @casein_page_title = 'Add a new offer'
      @offer = Offer.new
    end

    def create
      @offer = Offer.new offer_params
    
      if @offer.save
        flash[:notice] = 'Offer created'
        redirect_to casein_offers_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new offer'
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = 'Update offer'
      
      respond_to do |format|
        if @offer.update_attributes offer_params
          if params[:publish]
            @offer.publish!
          elsif params[:unpublish]
            @offer.unpublish!
          end
        
          format.html { redirect_to casein_offer_path(@offer), notice: "Offer has been updated. #{undo_link}" }
          format.js
        else
          flash.now[:warning] = 'There were problems when trying to update this offer'
          render :action => :show
        end
     end
    end
    
    def edit_multiple
      @offers = Offer.where(id: offer_params[:offer_ids])

      if params[:edit]
        render "offers/edit_multiple"
      elsif params[:unpublish]
        @offers.each do |offer|
          offer.unpublish! if offer.published?
        end
        redirect_to casein_offers_path
      elsif params[:publish]
        @offers.each do |offer|
          offer.publish! if !offer.published?
        end
          redirect_to casein_offers_path
      elsif params[:delete]
          @offers.destroy_all
          redirect_to casein_offers_path
      end
    end

    def update_multiple
     @offers = Offer.friendly.update(params[:offers].keys, params[:offers].values)
      @offers.reject! { |offer| offer.errors.empty? }
      if @offers.empty?
        redirect_to casein_offers_path
      else
        render "offers/edit_multiple"
      end
    end
 
    def destroy

      @offer.destroy
      flash[:notice] = 'Offer has been deleted. #{undo_link}"'
      redirect_to casein_offers_path
    end
  
    private
      
      def offer_params
        params.require(:offer).permit(:title, :content, :expiration_date, :link)
      end
      
      def undo_link
        view_context.link_to("undo", revert_version_path(@offer.versions.last), :method => :post).html_safe
      end
      
      def load_offer
        @offer = Offer.friendly.find params[:id]
      end
  
  end
end
