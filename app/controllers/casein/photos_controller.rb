# Scaffolding generated by Casein v5.1.1.5

module Casein
  class PhotosController < Casein::CaseinController
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Photos'
      @photos = Photo.all
      respond_to do |format|
        format.html
        format.csv { send_data @photos.to_csv, filename: "photos-#{Date.today}.csv"}
        format.xlsx
      end
    end
  
    def show
      @casein_page_title = 'View photos'
      @photo = Photo.find params[:id]
    end
  
    def import
      Photo.import(params[:file])
      flash[:notice] = 'File has been imported'
      redirect_to casein_photos_path
    end

    def new
      @casein_page_title = 'Add a new photos'
      @photo = Photo.new
    end

    def create
      @photo = Photo.new photo_params
    
      if @photo.save
        respond_to do |format|
          format.html {redirect_to casein_photos_path}
          format.json {render json: { :photo => @photo, :link => @photo.image_url}}
        end
      else
        flash.now[:warning] = 'There were problems when trying to add a new photo'
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = 'Update photos'
      
      @photos = Photo.find params[:id]
    
      if @photo.update_attributes photo_params
        flash[:notice] = 'Photo has been updated'
        redirect_to casein_photos_path
      else
        flash.now[:warning] = 'There were problems when trying to update this photo'
        render :action => :show
      end
    end
    
    def edit_multiple
      @photos = Photo.where(id: photo_params[:photos_ids])

      if params[:edit]
        render "photos/edit_multiple"
      elsif params[:unpublish]
        @photos.each do |photos|
          photos.unpublish! if photos.published?
        end
        redirect_to casein_photos_path
      elsif params[:publish]
        @photos.each do |photos|
          photos.publish! if !photos.published?
        end
          redirect_to casein_photos_path
      elsif params[:delete]
          @photos.destroy_all
          redirect_to casein_photos_path
      end
    end

    def update_multiple
      @photos = Photo.where(id: photo_params[:photo_ids]).update_all(params[:imageable])

      redirect_to current_imageable_path
    end
 
    def destroy
      @photo = Photo.find(params[:id])
      @photo.destroy
      flash[:notice] = "Photos has been deleted."
      redirect_to casein_photos_path
    end
  
    private
      
      def photo_params
        params.require(:photo).permit(:caption, :recipe_id, {:photo_ids => []}, {:images => [] }, :imageable_id, :imageable_type, :image)
      end
      
      def current_imageable_path
          if params[:origin].present?
            origin = params[:origin]
            resource = origin['origin_type'].pluralize.downcase
            id = origin['origin_id']
            "/casein/#{resource}/#{id}"
          else
            imageable = params[:imageable]
            resource = imageable['imageable_type'].pluralize.downcase
            id = imageable['imageable_id']
            if resource == ""
              casein_photos_path
            else
              "/casein/#{resource}/#{id}"
            end
          end
      end

      
      def load_photos
        @photos = Photo.find params[:id]
      end
  
  end
end
