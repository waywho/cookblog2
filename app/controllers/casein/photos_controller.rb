# Scaffolding generated by Casein v5.1.1.5

module Casein
  class PhotosController < Casein::CaseinController
    ## optional filters for defining usage according to Casein::AdminUser access_levels
    # before_filter :needs_admin, :except => [:action1, :action2]
    # before_filter :needs_admin_or_current_user, :only => [:action1, :action2]
  
    def index
      @casein_page_title = 'Photos'
      @photos = Photo.order(sort_order(:caption)).paginate :page => params[:page]
      respond_to do |format|
        format.html
        format.csv { send_data @photos.to_csv, filename: "photos-#{Date.today}.csv"}
        format.xlsx
      end
    end
  
    def show
      @casein_page_title = 'View photos'
      @photo = Photo.find params[:id]
    end
  
    def import
      Photo.import(params[:file])
      flash[:notice] = 'File has been imported'
      redirect_to casein_photos_path
    end

    def new
      @casein_page_title = 'Add a new photos'
      @photos = Photo.new
    end

    def create
      @photos = Photo.new photos_params
    
      if @photos.save
        flash[:notice] = 'Photos created'
        redirect_to casein_photos_path
      else
        flash.now[:warning] = 'There were problems when trying to create a new photos'
        render :action => :new
      end
    end
  
    def update
      @casein_page_title = 'Update photos'
      
      respond_to do |format|
          if params[:submit]
        if @photos.update_attributes photos_params
          
            @photos.submit!
          elsif params[:approve]
            @photos.approve!
          elsif params[:reject]
            @photos.reject!
          elsif params[:publish]
            @photos.publish!
          elsif params[:unpublish]
            @photos.unpublish!
          end
        
          format.html { redirect_to casein_photos_path(@photos), notice: "Photos has been updated. #{undo_link}" }
          format.js
        else
          flash.now[:warning] = 'There were problems when trying to update this photos'
          render :action => :show
        end
     end
    end
    
    def edit_multiple
      @photos = Photo.where(id: photos_params[:photos_ids])

      if params[:edit]
        render "photos/edit_multiple"
      elsif params[:unpublish]
        @photos.each do |photos|
          photos.unpublish! if photos.published?
        end
        redirect_to casein_photos_path
      elsif params[:publish]
        @photos.each do |photos|
          photos.publish! if !photos.published?
        end
          redirect_to casein_photos_path
      elsif params[:delete]
          @photos.destroy_all
          redirect_to casein_photos_path
      end
    end

    def update_multiple
     @photos = Photo.friendly.update(params[:photos].keys, params[:photos].values)
      @photos.reject! { |photos| photos.errors.empty? }
      if @photos.empty?
        redirect_to casein_photos_path
      else
        render "photos/edit_multiple"
      end
    end
 
    def destroy

      @photos.destroy
      flash[:notice] = 'Photos has been deleted. #{undo_link}"'
      redirect_to casein_photos_path
    end
  
    private
      
      def photos_params
        params.require(:photos).permit(:caption, :imageable_id, :imageable_type, :image)
      end
      
      def undo_link
        view_context.link_to("undo", revert_version_path(@photos.versions.last), :method => :post).html_safe
      end
      
      def load_photos
        @photos = Photo.friendly.find params[:id]
      end
  
  end
end
